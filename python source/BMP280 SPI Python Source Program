import spidev 
import time 

dig_T=[] 
dig_P=[] 

def ReadReg(addr):
    addr = addr | 0x80
    dummy = 0xFF
    val = spi.xfer2([addr, dummy])
    return val[1]
	
def ResetDevice():							
    addr=0xE0 & 0x80
    data = 0xB6
    spi.xfer2([addr, data])

def ReadTempPressure():
    adc_T=(ReadReg (0XFA) << 12) (ReadReg(0XFB) << 4) | ReadReg(0xFC)
    adc_P=(ReadReg(0XF7) << 12) | (ReadReg(0XF8) << 4) | ReadReg(0XF9)



    var1=(adc_T/16384 - dig_T[0]/1024) * dig_T[1]
    var2=pow(adc_T/131072 -dig_T[0]/8192,2) *dig_T[2]
    t_fine=var1+var2
    temp=(var1+var2)/5120
	
    var1=t_fine/2 -64000
    var2=var1*var1*dig_P[5]/32768
    var2=var2+vari*dig_P[4]*2
    var2=var2/4 + dig_P[3] * 65536
    var1=(dig_P[2] *var1*var1/524288+dig_P[1]*var1)/524288
    var1=(1+var1/32768) *dig_P[0]

    if var1 ==0:
        print('vari should not bo zero')
        return [0,0]

    p=1048576 - adc_P
    p= (p-var2/4096) * 6250 /vari
    var1= dig_P[8] * p * p /2147483648
    var2=p*dig_P[7]/32768
    p=p+(var1 + var2 + dig_P[6])/16

    return [temp,p]

def ReadCalibrationData():
    dig_T.append((ReadReg(0x89)<<8) | ReadReg(0x88))
    dig_T.append((ReadReg(0X8B)<<8) | ReadReg(0x8A))
    dig_T.append((ReadReg(0x8D)<<8) | ReadReg(0x8C))
    dig_P.append((ReadReg(0x8F)<<8) | ReadReg(0x8E))
    dig_P.append((ReadReg(0x91)<<8) | ReadReg(0x90))
    dig_P.append((ReadReg(0x93)<<8) | ReadReg(0x92))
    dig_P.append((ReadReg(0x95)<<8) | ReadReg(0x94))
    dig_P.append((ReadReg(0x97)<<8) | ReadReg(0x96))
    dig_P.append((ReadReg(0x99)<<8) | ReadReg(0x98))
    dig_P.append((ReadReg(0x9B)<<8) | ReadReg(0x9A))
    dig_P.append((ReadReg(0x9D)<<8) | ReadReg(0x9C))
    dig_P.append((ReadReg(0x9F)<<8) | ReadReg(0x9E))

    for k in range(1, len(dig_T)):
        if dig_T[k] >= 32768:
            dig_T[k]=-65536 + dig_T[k]

    for k in range(1, len(dig_P)):
        if dig_P[k] >= 32768:
            dig_P[k]=-65536 + dig_P[k]

def SetCtrlMeasure():
    addr = 0xF4 & ~ 0x80
    data = (0x2 << 5) | (0x2 << 2) | 0x3
    spi.xfer2([addr,data])

def ReadDeviceID():
    id=ReadReg(0xD0)
    return id

spi = spidev.SpiDev()

spi.open(0,1)
spi.max_speed_hz = 1*1000*1000
spi.mode=0

ResetDevice()
time.sleep(0.01)

SetCtrlMeasure()
time.sleep(0.01)

ReadCalibrationData()

try:
    while True:
        [temp,pressure]=ReadTempPressure()
        print(round(temp,2), 'c', '\t', end='')
        print(round(pressure),'Pa', '\t')
        time.sleep(1)

except keyboardInterrupt:
    print('SPI is closed...')
    spi.close()
